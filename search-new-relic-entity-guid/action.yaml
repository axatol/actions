name: Search entity GUID
description: Searches for the GUID of an entity in New Relic

inputs:
  name:
    description: Entity name
    required: true

  api-key:
    description: New Relic API key
    required: true

  domain:
    description: Entity domain
    required: false
    default: APM

  type:
    description: Entity type
    required: false
    default: APPLICATION

outputs:
  guid:
    description: Entity GUID
    value: ${{ steps.search.outputs.guid }}

  count:
    description: Count of entities matched
    value: ${{ steps.search.outputs.count }}

runs:
  using: composite
  steps:
    - id: search
      uses: actions/github-script@v6
      env:
        api_key: ${{ inputs.api-key }}
        query_name: ${{ inputs.name }}
        query_domain: ${{ inputs.domain }}
        query_type: ${{ inputs.type }}
      with:
        script: |
          const query = `
          query ($name: String, $type: EntitySearchQueryBuilderType, $domain: EntitySearchQueryBuilderDomain) {
            actor {
              entitySearch(queryBuilder: {name: $name, domain: $domain, type: $type}) {
                results {
                  entities {
                    guid
                    name
                  }
                }
              }
            }
          }
          `;

          const response = await fetch("https://api.newrelic.com/graphql", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Api-Key": process.env.api_key,
            },
            body: {
              query, 
              variables: {
                name: process.env.query_name,
                domain: process.env.query_domain,
                type: process.env.query_type,
              },
            },
          });

          const data = await response.json();
          const entities = data.actor.entitySearch.results.entities;

          // first guid
          core.setOutput("count", entities.length);
          if (entities.length > 0) {
            core.setOutput("guid", entities[0].guid);
          }

          if (entities.length > 1) {
            core.warning("More than one matching entity was found");
          }
