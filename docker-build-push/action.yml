name: Build and Push
description: Build and push docker image

inputs:
  image:
    description: Image to work with
    required: true
  next-tag:
    description: Next tag
    required: false
    default: latest
  previous-tag:
    description: Previous tag
    required: false
    default: previous
  tag-previous:
    description: Whether or not to tag previous image
    required: false
    default: "false"
  use-cache:
    description: Whether or not to use the previous image as cache
    required: false
    default: "false"
  build-args:
    description: Additional arguments to pass to build command
    required: false
    default: ""
  build-context:
    description: Docker build context
    required: false
    default: "."
  dry-run:
    description: Do not push anything
    required: false
    default: "false"

runs:
  using: composite

  steps:
    - name: Retrieve last image
      if: inputs.use-cache == 'true' || inputs.tag-previous == 'true'
      shell: bash
      continue-on-error: true
      run: docker pull ${{ inputs.image }}:${{ inputs.next-tag }}

    - name: Tag last image
      if: inputs.tag-previous == 'true'
      shell: bash
      continue-on-error: true
      run: docker tag ${{ inputs.image }}:${{ inputs.next-tag }} ${{ inputs.image }}:${{ inputs.previous-tag }}

    - name: Push last image
      if: inputs.tag-previous == 'true' && inputs.dry-run != 'true'
      shell: bash
      continue-on-error: true
      run: docker push ${{ inputs.image }}:${{ inputs.previous-tag }}

    - name: Build new image
      shell: bash
      run: |
        CACHE_ARG=""
        [ "${{ inputs.use-cache }}" == "true" ] && CACHE_ARG="--cache-from ${{ inputs.image }}:${{ inputs.next-tag }}"
        docker build --tag ${{ inputs.image }}:${{ inputs.next-tag }} $CACHE_ARG ${{ inputs.build-args }} ${{ inputs.build-context }}

    - name: Push image
      if: inputs.dry-run != 'true'
      shell: bash
      run: docker push ${{ inputs.image }}:${{ inputs.next-tag }}
